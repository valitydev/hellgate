[
    {bender, [
        %% Available options for 'machinery_backend'
        %%     machinegun | progressor | hybrid
        %%
        %% For 'progressor' and 'hybrid' backends ensure config
        %% '{progressor, [ ... ]}' is set.
        {machinery_backend, progressor},
        {services, #{
            bender => #{path => <<"/v1/bender">>},
            generator => #{path => <<"/v1/generator">>}
        }},

        {generator, #{
            path => <<"/v1/stateproc/bender_generator">>,
            schema => machinery_mg_schema_generic,
            % mandatory
            url => <<"http://machinegun:8022/v1/automaton">>,
            transport_opts => #{
                max_connections => 1000
            }
        }},

        {sequence, #{
            path => <<"/v1/stateproc/bender_sequence">>,
            schema => machinery_mg_schema_generic,
            % mandatory
            url => <<"http://machinegun:8022/v1/automaton">>,
            transport_opts => #{
                max_connections => 1000
            }
        }},

        {route_opts, #{
            % handler_limits => #{}
        }},

        {ip, "::"},
        {port, 8022},

        {protocol_opts, #{
            % time in ms with no requests before Cowboy closes the connection
            request_timeout => 5000
        }},
        % time in ms before woody forces connections closing
        {shutdown_timeout, 7000},

        {transport_opts, #{
            % timeout() | infinity, default is 5000
            handshake_timeout => 5000,
            % maximum number of incoming connections, default is 1024
            max_connections => 10000,
            % size of acceptors pool, default is 10
            num_acceptors => 100
        }},

        {woody_event_handlers, [
            {scoper_woody_event_handler, #{
                event_handler_opts => #{
                    formatter_opts => #{
                        max_length => 1000,
                        max_printable_string_length => 80
                    }
                }
            }}
        ]},

        {health_check, #{
            disk => {erl_health, disk, ["/", 99]},
            memory => {erl_health, cg_memory, [99]},
            service => {erl_health, service, [<<"bender">>]}
        }}
    ]},

    {kernel, [
        {logger_sasl_compatible, false},
        {logger_level, debug},
        {logger, [
            {handler, default, logger_std_h, #{
                level => error,
                config => #{
                    type => standard_error
                },
                formatter =>
                    {logger_formatter, #{
                        depth => 30
                    }}
            }},
            {handler, console, logger_std_h, #{
                config => #{
                    type => {file, "/var/log/bender/log.json"}
                },
                formatter => {logger_logstash_formatter, #{}}
            }}
        ]}
    ]},

    {epg_connector, [
        {databases, #{
            default_db => #{
                host => "db",
                port => 5432,
                username => "bender",
                password => "postgres",
                database => "bender"
            }
        }},
        {pools, #{
            default_pool => #{
                database => default_db,
                size => 30
            }
        }}
    ]},

    {progressor, [
        {call_wait_timeout, 20},
        {defaults, #{
            storage => #{
                client => prg_pg_backend,
                options => #{
                    pool => default_pool
                }
            },
            retry_policy => #{
                initial_timeout => 5,
                backoff_coefficient => 1.0,
                %% seconds
                max_timeout => 180,
                max_attempts => 3,
                non_retryable_errors => []
            },
            task_scan_timeout => 1,
            worker_pool_size => 100,
            process_step_timeout => 30
        }},
        {namespaces, #{
            'bender_generator' => #{
                processor => #{
                    client => machinery_prg_backend,
                    options => #{
                        namespace => 'bender_generator',
                        handler => {bender_generator, #{}},
                        schema => machinery_mg_schema_generic
                    }
                }
            },
            'bender_sequence' => #{
                processor => #{
                    client => machinery_prg_backend,
                    options => #{
                        namespace => 'bender_sequence',
                        handler => {bender_sequence, #{}},
                        schema => machinery_mg_schema_generic
                    }
                }
            }
        }}
    ]},

    {os_mon, [
        % for better compatibility with busybox coreutils
        {disksup_posix_only, true}
    ]},

    {scoper, [
        {storage, scoper_storage_logger}
    ]},

    {snowflake, [
        % 1 second
        {max_backward_clock_moving, 1000}
        % {machine_id, hostname_hash}  % you MUST set this option in production
    ]},

    {prometheus, [
        {collectors, [default]}
    ]},

    {hackney, [
        {mod_metrics, woody_hackney_prometheus}
    ]}
].
